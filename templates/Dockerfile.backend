# Standard Backend Service Dockerfile (TypeScript/Node.js)
FROM node:20-alpine AS builder
WORKDIR /app

# Accept GitHub token for private packages
ARG GITHUB_TOKEN
ARG VERSION=unknown

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Setup npm auth and install dependencies
COPY .npmrc ./
RUN sed -i "s/\${GITHUB_TOKEN}/${GITHUB_TOKEN}/g" .npmrc && \
    pnpm install --frozen-lockfile

# Copy source code
COPY src ./src
COPY tsconfig*.json ./

# Build the application
RUN pnpm run build

# Verify build output
RUN test -d dist && test -f dist/index.js || exit 1

# Runtime stage
FROM node:20-alpine
WORKDIR /app

# Install tini for proper signal handling
RUN apk add --no-cache tini

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Setup npm auth for production dependencies
ARG GITHUB_TOKEN
COPY .npmrc ./
RUN sed -i "s/\${GITHUB_TOKEN}/${GITHUB_TOKEN}/g" .npmrc && \
    pnpm install --prod --frozen-lockfile && \
    rm -f .npmrc

# Copy built application
COPY --from=builder /app/dist ./dist

# Create non-root user
USER node

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "dist/index.js"]