import * as pulumi from "@pulumi/pulumi";
export declare class GenaiFunction extends pulumi.CustomResource {
    /**
     * Get an existing GenaiFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiFunctionState, opts?: pulumi.CustomResourceOptions): GenaiFunction;
    /**
     * Returns true if the given object is an instance of GenaiFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GenaiFunction;
    /**
     * The name of the GenAI resource.
     */
    readonly agentId: pulumi.Output<string>;
    /**
     * The region where the GenAI resource will be created.
     */
    readonly description: pulumi.Output<string>;
    /**
     * The model to use for the GenAI resource.
     */
    readonly faasName: pulumi.Output<string | undefined>;
    /**
     * The current status of the GenAI resource.
     */
    readonly faasNamespace: pulumi.Output<string>;
    /**
     * The creation timestamp of the GenAI resource.
     */
    readonly functionName: pulumi.Output<string>;
    /**
     * The unique identifier of the GenAI function.
     */
    readonly functionUuid: pulumi.Output<string>;
    /**
     * The input schema of the GenAI resource.
     */
    readonly inputSchema: pulumi.Output<string>;
    /**
     * The output schema of the GenAI resource.
     */
    readonly outputSchema: pulumi.Output<string | undefined>;
    /**
     * Create a GenaiFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiFunctionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering GenaiFunction resources.
 */
export interface GenaiFunctionState {
    /**
     * The name of the GenAI resource.
     */
    agentId?: pulumi.Input<string>;
    /**
     * The region where the GenAI resource will be created.
     */
    description?: pulumi.Input<string>;
    /**
     * The model to use for the GenAI resource.
     */
    faasName?: pulumi.Input<string>;
    /**
     * The current status of the GenAI resource.
     */
    faasNamespace?: pulumi.Input<string>;
    /**
     * The creation timestamp of the GenAI resource.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The unique identifier of the GenAI function.
     */
    functionUuid?: pulumi.Input<string>;
    /**
     * The input schema of the GenAI resource.
     */
    inputSchema?: pulumi.Input<string>;
    /**
     * The output schema of the GenAI resource.
     */
    outputSchema?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a GenaiFunction resource.
 */
export interface GenaiFunctionArgs {
    /**
     * The name of the GenAI resource.
     */
    agentId: pulumi.Input<string>;
    /**
     * The region where the GenAI resource will be created.
     */
    description: pulumi.Input<string>;
    /**
     * The model to use for the GenAI resource.
     */
    faasName?: pulumi.Input<string>;
    /**
     * The current status of the GenAI resource.
     */
    faasNamespace: pulumi.Input<string>;
    /**
     * The creation timestamp of the GenAI resource.
     */
    functionName: pulumi.Input<string>;
    /**
     * The input schema of the GenAI resource.
     */
    inputSchema: pulumi.Input<string>;
    /**
     * The output schema of the GenAI resource.
     */
    outputSchema?: pulumi.Input<string>;
}
