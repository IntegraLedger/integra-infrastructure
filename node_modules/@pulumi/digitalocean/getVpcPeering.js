"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVpcPeeringOutput = exports.getVpcPeering = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ### VPC Peering By Id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 *
 * ### VPC Peering By Name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 */
function getVpcPeering(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getVpcPeering:getVpcPeering", {
        "id": args.id,
        "name": args.name,
        "vpcIds": args.vpcIds,
    }, opts);
}
exports.getVpcPeering = getVpcPeering;
/**
 * ## Example Usage
 *
 * ### VPC Peering By Id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 *
 * ### VPC Peering By Name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 */
function getVpcPeeringOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("digitalocean:index/getVpcPeering:getVpcPeering", {
        "id": args.id,
        "name": args.name,
        "vpcIds": args.vpcIds,
    }, opts);
}
exports.getVpcPeeringOutput = getVpcPeeringOutput;
//# sourceMappingURL=getVpcPeering.js.map