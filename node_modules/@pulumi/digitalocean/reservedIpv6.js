"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservedIpv6 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean reserved IPv6 to represent a publicly-accessible static IPv6 addresses that can be mapped to one of your Droplets.
 *
 * > **NOTE:** Reserved IPv6s can be assigned to a Droplet using
 * `digitalocean.ReservedIpv6Assignment` resource only.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const foobar = new digitalocean.ReservedIpv6("foobar", {regionSlug: "nyc3"});
 * ```
 *
 * ## Import
 *
 * Reserved IPv6s can be imported using the `ip`, e.g.
 *
 * ```sh
 * $ pulumi import digitalocean:index/reservedIpv6:ReservedIpv6 myip
 * ```
 *
 * 2409:40d0:fa:27dd:9b24:7074:7b85:eee6
 */
class ReservedIpv6 extends pulumi.CustomResource {
    /**
     * Get an existing ReservedIpv6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReservedIpv6(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReservedIpv6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedIpv6.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dropletId"] = state ? state.dropletId : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["regionSlug"] = state ? state.regionSlug : undefined;
            resourceInputs["reservedIpv6Urn"] = state ? state.reservedIpv6Urn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.regionSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionSlug'");
            }
            resourceInputs["dropletId"] = args ? args.dropletId : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["regionSlug"] = args ? args.regionSlug : undefined;
            resourceInputs["reservedIpv6Urn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedIpv6.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ReservedIpv6 = ReservedIpv6;
/** @internal */
ReservedIpv6.__pulumiType = 'digitalocean:index/reservedIpv6:ReservedIpv6';
//# sourceMappingURL=reservedIpv6.js.map