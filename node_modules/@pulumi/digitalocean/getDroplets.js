"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDropletsOutput = exports.getDroplets = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
 * If no filters are specified, all Droplets will be returned.
 *
 * This data source is useful if the Droplets in question are not managed by the provider or you need to
 * utilize any of the Droplets' data.
 *
 * By default, only non-GPU Droplets are returned. To list only GPU Droplets, set
 * the `gpus` attribute to `true`.
 *
 * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
 * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
 *
 * ## Example Usage
 *
 * Use the `filter` block with a `key` string and `values` list to filter images.
 *
 * For example to find all Droplets with size `s-1vcpu-1gb`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const small = digitalocean.getDroplets({
 *     filters: [{
 *         key: "size",
 *         values: ["s-1vcpu-1gb"],
 *     }],
 * });
 * ```
 *
 * You can filter on multiple fields and sort the results as well:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const small_with_backups = digitalocean.getDroplets({
 *     filters: [
 *         {
 *             key: "size",
 *             values: ["s-1vcpu-1gb"],
 *         },
 *         {
 *             key: "backups",
 *             values: ["true"],
 *         },
 *     ],
 *     sorts: [{
 *         key: "created_at",
 *         direction: "desc",
 *     }],
 * });
 * ```
 */
function getDroplets(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getDroplets:getDroplets", {
        "filters": args.filters,
        "gpus": args.gpus,
        "sorts": args.sorts,
    }, opts);
}
exports.getDroplets = getDroplets;
/**
 * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
 * If no filters are specified, all Droplets will be returned.
 *
 * This data source is useful if the Droplets in question are not managed by the provider or you need to
 * utilize any of the Droplets' data.
 *
 * By default, only non-GPU Droplets are returned. To list only GPU Droplets, set
 * the `gpus` attribute to `true`.
 *
 * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
 * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
 *
 * ## Example Usage
 *
 * Use the `filter` block with a `key` string and `values` list to filter images.
 *
 * For example to find all Droplets with size `s-1vcpu-1gb`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const small = digitalocean.getDroplets({
 *     filters: [{
 *         key: "size",
 *         values: ["s-1vcpu-1gb"],
 *     }],
 * });
 * ```
 *
 * You can filter on multiple fields and sort the results as well:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const small_with_backups = digitalocean.getDroplets({
 *     filters: [
 *         {
 *             key: "size",
 *             values: ["s-1vcpu-1gb"],
 *         },
 *         {
 *             key: "backups",
 *             values: ["true"],
 *         },
 *     ],
 *     sorts: [{
 *         key: "created_at",
 *         direction: "desc",
 *     }],
 * });
 * ```
 */
function getDropletsOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("digitalocean:index/getDroplets:getDroplets", {
        "filters": args.filters,
        "gpus": args.gpus,
        "sorts": args.sorts,
    }, opts);
}
exports.getDropletsOutput = getDropletsOutput;
//# sourceMappingURL=getDroplets.js.map