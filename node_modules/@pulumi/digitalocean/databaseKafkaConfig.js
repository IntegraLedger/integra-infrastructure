"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseKafkaConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a virtual resource that can be used to change advanced configuration
 * options for a DigitalOcean managed Kafka database cluster.
 *
 * > **Note** Kafka configurations are only removed from state when destroyed. The remote configuration is not unset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleDatabaseCluster = new digitalocean.DatabaseCluster("example", {
 *     name: "example-kafka-cluster",
 *     engine: "kafka",
 *     version: "3.7",
 *     size: digitalocean.DatabaseSlug.DB_1VPCU1GB,
 *     region: digitalocean.Region.NYC3,
 *     nodeCount: 3,
 * });
 * const example = new digitalocean.DatabaseKafkaConfig("example", {
 *     clusterId: exampleDatabaseCluster.id,
 *     groupInitialRebalanceDelayMs: 3000,
 *     groupMinSessionTimeoutMs: 6000,
 *     groupMaxSessionTimeoutMs: 1800000,
 *     messageMaxBytes: 1048588,
 *     logCleanerDeleteRetentionMs: 86400000,
 *     logCleanerMinCompactionLagMs: "0",
 *     logFlushIntervalMs: "9223372036854775807",
 *     logIndexIntervalBytes: 4096,
 *     logMessageDownconversionEnable: true,
 *     logMessageTimestampDifferenceMaxMs: "9223372036854775807",
 *     logPreallocate: false,
 *     logRetentionBytes: "-1",
 *     logRetentionHours: 168,
 *     logRetentionMs: "604800000",
 *     logRollJitterMs: "0",
 *     logSegmentDeleteDelayMs: 60000,
 *     autoCreateTopicsEnable: true,
 * });
 * ```
 *
 * ## Import
 *
 * A Kafka database cluster's configuration can be imported using the `id` the parent cluster, e.g.
 *
 * ```sh
 * $ pulumi import digitalocean:index/databaseKafkaConfig:DatabaseKafkaConfig example 4b62829a-9c42-465b-aaa3-84051048e712
 * ```
 */
class DatabaseKafkaConfig extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseKafkaConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseKafkaConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatabaseKafkaConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseKafkaConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoCreateTopicsEnable"] = state ? state.autoCreateTopicsEnable : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["groupInitialRebalanceDelayMs"] = state ? state.groupInitialRebalanceDelayMs : undefined;
            resourceInputs["groupMaxSessionTimeoutMs"] = state ? state.groupMaxSessionTimeoutMs : undefined;
            resourceInputs["groupMinSessionTimeoutMs"] = state ? state.groupMinSessionTimeoutMs : undefined;
            resourceInputs["logCleanerDeleteRetentionMs"] = state ? state.logCleanerDeleteRetentionMs : undefined;
            resourceInputs["logCleanerMinCompactionLagMs"] = state ? state.logCleanerMinCompactionLagMs : undefined;
            resourceInputs["logFlushIntervalMs"] = state ? state.logFlushIntervalMs : undefined;
            resourceInputs["logIndexIntervalBytes"] = state ? state.logIndexIntervalBytes : undefined;
            resourceInputs["logMessageDownconversionEnable"] = state ? state.logMessageDownconversionEnable : undefined;
            resourceInputs["logMessageTimestampDifferenceMaxMs"] = state ? state.logMessageTimestampDifferenceMaxMs : undefined;
            resourceInputs["logPreallocate"] = state ? state.logPreallocate : undefined;
            resourceInputs["logRetentionBytes"] = state ? state.logRetentionBytes : undefined;
            resourceInputs["logRetentionHours"] = state ? state.logRetentionHours : undefined;
            resourceInputs["logRetentionMs"] = state ? state.logRetentionMs : undefined;
            resourceInputs["logRollJitterMs"] = state ? state.logRollJitterMs : undefined;
            resourceInputs["logSegmentDeleteDelayMs"] = state ? state.logSegmentDeleteDelayMs : undefined;
            resourceInputs["messageMaxBytes"] = state ? state.messageMaxBytes : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["autoCreateTopicsEnable"] = args ? args.autoCreateTopicsEnable : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["groupInitialRebalanceDelayMs"] = args ? args.groupInitialRebalanceDelayMs : undefined;
            resourceInputs["groupMaxSessionTimeoutMs"] = args ? args.groupMaxSessionTimeoutMs : undefined;
            resourceInputs["groupMinSessionTimeoutMs"] = args ? args.groupMinSessionTimeoutMs : undefined;
            resourceInputs["logCleanerDeleteRetentionMs"] = args ? args.logCleanerDeleteRetentionMs : undefined;
            resourceInputs["logCleanerMinCompactionLagMs"] = args ? args.logCleanerMinCompactionLagMs : undefined;
            resourceInputs["logFlushIntervalMs"] = args ? args.logFlushIntervalMs : undefined;
            resourceInputs["logIndexIntervalBytes"] = args ? args.logIndexIntervalBytes : undefined;
            resourceInputs["logMessageDownconversionEnable"] = args ? args.logMessageDownconversionEnable : undefined;
            resourceInputs["logMessageTimestampDifferenceMaxMs"] = args ? args.logMessageTimestampDifferenceMaxMs : undefined;
            resourceInputs["logPreallocate"] = args ? args.logPreallocate : undefined;
            resourceInputs["logRetentionBytes"] = args ? args.logRetentionBytes : undefined;
            resourceInputs["logRetentionHours"] = args ? args.logRetentionHours : undefined;
            resourceInputs["logRetentionMs"] = args ? args.logRetentionMs : undefined;
            resourceInputs["logRollJitterMs"] = args ? args.logRollJitterMs : undefined;
            resourceInputs["logSegmentDeleteDelayMs"] = args ? args.logSegmentDeleteDelayMs : undefined;
            resourceInputs["messageMaxBytes"] = args ? args.messageMaxBytes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseKafkaConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabaseKafkaConfig = DatabaseKafkaConfig;
/** @internal */
DatabaseKafkaConfig.__pulumiType = 'digitalocean:index/databaseKafkaConfig:DatabaseKafkaConfig';
//# sourceMappingURL=databaseKafkaConfig.js.map