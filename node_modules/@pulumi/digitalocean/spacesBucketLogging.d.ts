import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const assets = new digitalocean.SpacesBucket("assets", {
 *     name: "assets",
 *     region: digitalocean.Region.NYC3,
 * });
 * const logs = new digitalocean.SpacesBucket("logs", {
 *     name: "logs",
 *     region: digitalocean.Region.NYC3,
 * });
 * const example = new digitalocean.SpacesBucketLogging("example", {
 *     region: "%s",
 *     bucket: assets.id,
 *     targetBucket: logs.id,
 *     targetPrefix: "access-logs/",
 * });
 * ```
 *
 * ## Import
 *
 * Spaces bucket logging can be imported using the `region` and `bucket` attributes (delimited by a comma):
 *
 * ```sh
 * $ pulumi import digitalocean:index/spacesBucketLogging:SpacesBucketLogging example `region`,`bucket`
 * ```
 */
export declare class SpacesBucketLogging extends pulumi.CustomResource {
    /**
     * Get an existing SpacesBucketLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpacesBucketLoggingState, opts?: pulumi.CustomResourceOptions): SpacesBucketLogging;
    /**
     * Returns true if the given object is an instance of SpacesBucketLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SpacesBucketLogging;
    /**
     * The name of the bucket which will be logged.
     */
    readonly bucket: pulumi.Output<string>;
    /**
     * The region where the bucket resides.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The name of the bucket which will store the logs.
     */
    readonly targetBucket: pulumi.Output<string>;
    /**
     * The prefix for the log files.
     */
    readonly targetPrefix: pulumi.Output<string>;
    /**
     * Create a SpacesBucketLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpacesBucketLoggingArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SpacesBucketLogging resources.
 */
export interface SpacesBucketLoggingState {
    /**
     * The name of the bucket which will be logged.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The region where the bucket resides.
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the bucket which will store the logs.
     */
    targetBucket?: pulumi.Input<string>;
    /**
     * The prefix for the log files.
     */
    targetPrefix?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SpacesBucketLogging resource.
 */
export interface SpacesBucketLoggingArgs {
    /**
     * The name of the bucket which will be logged.
     */
    bucket: pulumi.Input<string>;
    /**
     * The region where the bucket resides.
     */
    region: pulumi.Input<string>;
    /**
     * The name of the bucket which will store the logs.
     */
    targetBucket: pulumi.Input<string>;
    /**
     * The prefix for the log files.
     */
    targetPrefix: pulumi.Input<string>;
}
