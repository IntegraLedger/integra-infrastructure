"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseKafkaTopic = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a DigitalOcean Kafka topic for Kafka clusters.
 *
 * ## Example Usage
 *
 * ### Create a new Kafka topic
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const kafka_example = new digitalocean.DatabaseCluster("kafka-example", {
 *     name: "example-kafka-cluster",
 *     engine: "kafka",
 *     version: "3.5",
 *     size: "db-s-2vcpu-2gb",
 *     region: digitalocean.Region.NYC1,
 *     nodeCount: 3,
 *     tags: ["production"],
 * });
 * const topic_01 = new digitalocean.DatabaseKafkaTopic("topic-01", {
 *     clusterId: kafka_example.id,
 *     name: "topic-01",
 *     partitionCount: 3,
 *     replicationFactor: 2,
 *     configs: [{
 *         cleanupPolicy: "compact",
 *         compressionType: "uncompressed",
 *         deleteRetentionMs: "14000",
 *         fileDeleteDelayMs: "170000",
 *         flushMessages: "92233",
 *         flushMs: "92233720368",
 *         indexIntervalBytes: "40962",
 *         maxCompactionLagMs: "9223372036854775807",
 *         maxMessageBytes: "1048588",
 *         messageDownConversionEnable: true,
 *         messageFormatVersion: "3.0-IV1",
 *         messageTimestampDifferenceMaxMs: "9223372036854775807",
 *         messageTimestampType: "log_append_time",
 *         minCleanableDirtyRatio: 0.5,
 *         minCompactionLagMs: "20000",
 *         minInsyncReplicas: 2,
 *         preallocate: false,
 *         retentionBytes: "-1",
 *         retentionMs: "-1",
 *         segmentBytes: "209715200",
 *         segmentIndexBytes: "10485760",
 *         segmentJitterMs: "0",
 *         segmentMs: "604800000",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Topics can be imported using the `id` of the source cluster and the `name` of the topic joined with a comma. For example:
 *
 * ```sh
 * $ pulumi import digitalocean:index/databaseKafkaTopic:DatabaseKafkaTopic topic-01 245bcfd0-7f31-4ce6-a2bc-475a116cca97,topic-01
 * ```
 */
class DatabaseKafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseKafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseKafkaTopic(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatabaseKafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseKafkaTopic.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionCount"] = state ? state.partitionCount : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitionCount"] = args ? args.partitionCount : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseKafkaTopic.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabaseKafkaTopic = DatabaseKafkaTopic;
/** @internal */
DatabaseKafkaTopic.__pulumiType = 'digitalocean:index/databaseKafkaTopic:DatabaseKafkaTopic';
//# sourceMappingURL=databaseKafkaTopic.js.map