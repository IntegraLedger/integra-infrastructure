import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ### Create a Key in a Spaces Bucket
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const foobar = new digitalocean.SpacesBucket("foobar", {
 *     name: "foobar",
 *     region: digitalocean.Region.NYC3,
 * });
 * const test = new digitalocean.SpacesBucketCorsConfiguration("test", {
 *     bucket: foobar.id,
 *     region: "nyc3",
 *     corsRules: [{
 *         allowedHeaders: ["*"],
 *         allowedMethods: [
 *             "PUT",
 *             "POST",
 *         ],
 *         allowedOrigins: ["https://s3-website-test.hashicorp.com"],
 *         exposeHeaders: ["ETag"],
 *         maxAgeSeconds: 3000,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Bucket policies can be imported using the `region` and `bucket` attributes (delimited by a comma):
 *
 * ```sh
 * $ pulumi import digitalocean:index/spacesBucketCorsConfiguration:SpacesBucketCorsConfiguration foobar `region`,`bucket`
 * ```
 */
export declare class SpacesBucketCorsConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SpacesBucketCorsConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpacesBucketCorsConfigurationState, opts?: pulumi.CustomResourceOptions): SpacesBucketCorsConfiguration;
    /**
     * Returns true if the given object is an instance of SpacesBucketCorsConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SpacesBucketCorsConfiguration;
    /**
     * The name of the bucket to which to apply the CORS configuration.
     */
    readonly bucket: pulumi.Output<string>;
    /**
     * Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
     */
    readonly corsRules: pulumi.Output<outputs.SpacesBucketCorsConfigurationCorsRule[]>;
    /**
     * The region where the bucket resides.
     */
    readonly region: pulumi.Output<string>;
    /**
     * Create a SpacesBucketCorsConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpacesBucketCorsConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SpacesBucketCorsConfiguration resources.
 */
export interface SpacesBucketCorsConfigurationState {
    /**
     * The name of the bucket to which to apply the CORS configuration.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsConfigurationCorsRule>[]>;
    /**
     * The region where the bucket resides.
     */
    region?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SpacesBucketCorsConfiguration resource.
 */
export interface SpacesBucketCorsConfigurationArgs {
    /**
     * The name of the bucket to which to apply the CORS configuration.
     */
    bucket: pulumi.Input<string>;
    /**
     * Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
     */
    corsRules: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsConfigurationCorsRule>[]>;
    /**
     * The region where the bucket resides.
     */
    region: pulumi.Input<string>;
}
